package main

import (
	_ "embed"
	"fmt"
	"log"
	"net/http"
	"net/http/httputil"
	"os"
	"os/exec"
	"strings"
)

//go:embed  main.go.tmpl
var mainTemplate string

func index(w http.ResponseWriter, req *http.Request) {
	url := getPath(req)[1:]

	reqs, err := httputil.DumpRequest(req, true)
	log.Println("INDEX", string(reqs), err, url)
	if len(url) == 0 {
		w.WriteHeader(404)
		return
	}
	image := strings.Join(url, "/")
	log.Println("should pull image", image)
	data := `
<html>
  <head>
    <meta name="go-import" content="go.localhost/docker/%s git http://go.localhost/git/%s/terminal">
  </head>
</html>
`
	w.Write([]byte(fmt.Sprintf(data, image, image)))
}

func getPath(req *http.Request) []string {
	url := []string{}
	for _, seg := range strings.Split(req.URL.Path, "/") {
		if seg != "" {
			url = append(url, seg)
		}
	}
	return url
}

func serve(w http.ResponseWriter, req *http.Request) {
	path := getPath(req)
	image := path[1] // TODO: allow with slashes
	reqs, err := httputil.DumpRequest(req, true)
	log.Println("GIT", string(reqs), err, path)
	folder := "/tmp/serving/" + image
	if _, err := os.Stat(folder); os.IsNotExist(err) {
		dir, _ := os.MkdirTemp("", "repo")
		os.WriteFile(dir+"/go.mod", []byte(fmt.Sprintf(`
module go.localhost/docker/%s

go 1.22
`, image)), 0o644)

		maintmpl := strings.ReplaceAll(mainTemplate, "IMAGE_NAME", image)
		os.WriteFile(dir+"/main.go", []byte(maintmpl), 0o644)

		init := VerboseCommand("bash", "-c", fmt.Sprintf(`
docker pull %s; docker save %s | zstd > image.zst
git init
git add -A
git -c user.name='Autogenerated' -c user.email= commit -m "Initial commit"`, image, image))
		init.Dir = dir
		init.Run()

		VerboseCommand("git", "--bare", "clone", dir, folder).Run()
		c := VerboseCommand("git", "--bare", "update-server-info")
		c.Dir = folder + "/.git"
		c.Run()
	}
	req.URL.Path = "/.git/" + strings.Join(path[3:], "/")
	log.Println("Lookup ", req.URL.Path)
	http.FileServer(http.Dir(folder)).ServeHTTP(w, req)
}

func main() {
	http.HandleFunc("/docker/", index)
	http.HandleFunc("/git/", serve)

	http.ListenAndServe(":80", nil)
}

func VerboseCommand(name string, arg ...string) *exec.Cmd {
	log.Printf("Running command: %v %v\n", name, strings.Join(arg, " "))
	cmd := exec.Command(name, arg...)
	cmd.Stderr = os.Stderr
	cmd.Stdout = os.Stdout
	return cmd
}
